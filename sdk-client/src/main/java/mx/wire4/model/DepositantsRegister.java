/*
 * Wire4RestAPI
 * Referencia de API. La API de Wire4 está organizada en torno a REST
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package mx.wire4.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * DepositantsRegister
 */


public class DepositantsRegister {
  @SerializedName("alias")
  private String alias = null;

  @SerializedName("currency_code")
  private String currencyCode = null;

  @SerializedName("email")
  private List<String> email = null;

  @SerializedName("name")
  private String name = null;

  public DepositantsRegister alias(String alias) {
    this.alias = alias;
    return this;
  }

   /**
   * Es el alias del depositante. Se valida hasta 80 caracteres.
   * @return alias
  **/
  @Schema(example = "Mi primer depositante", required = true, description = "Es el alias del depositante. Se valida hasta 80 caracteres.")
  public String getAlias() {
    return alias;
  }

  public void setAlias(String alias) {
    this.alias = alias;
  }

  public DepositantsRegister currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * Es el código de divisa en que operará el depositante. Es en el formato estándar de 3 dígitos.  Sólo se permiten los valores &lt;b&gt;MXP&lt;/b&gt; y &lt;b&gt;USD&lt;/b&gt;.
   * @return currencyCode
  **/
  @Schema(example = "MXP", required = true, description = "Es el código de divisa en que operará el depositante. Es en el formato estándar de 3 dígitos.  Sólo se permiten los valores <b>MXP</b> y <b>USD</b>.")
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }

  public DepositantsRegister email(List<String> email) {
    this.email = email;
    return this;
  }

  public DepositantsRegister addEmailItem(String emailItem) {
    if (this.email == null) {
      this.email = new ArrayList<>();
    }
    this.email.add(emailItem);
    return this;
  }

   /**
   * Es la lista de correos electrónicos (emails) del depositante. &lt;br&gt;&lt;br&gt;&lt;b&gt;Ejemplo&lt;/b&gt;: mi_correo@correo.com,mi_correo@correo.com...
   * @return email
  **/
  @Schema(description = "Es la lista de correos electrónicos (emails) del depositante. <br><br><b>Ejemplo</b>: mi_correo@correo.com,mi_correo@correo.com...")
  public List<String> getEmail() {
    return email;
  }

  public void setEmail(List<String> email) {
    this.email = email;
  }

  public DepositantsRegister name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Es el nombre del depositante. Se valida hasta 120 caracteres.
   * @return name
  **/
  @Schema(example = "Spei Ok", required = true, description = "Es el nombre del depositante. Se valida hasta 120 caracteres.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DepositantsRegister depositantsRegister = (DepositantsRegister) o;
    return Objects.equals(this.alias, depositantsRegister.alias) &&
        Objects.equals(this.currencyCode, depositantsRegister.currencyCode) &&
        Objects.equals(this.email, depositantsRegister.email) &&
        Objects.equals(this.name, depositantsRegister.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alias, currencyCode, email, name);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DepositantsRegister {\n");
    
    sb.append("    alias: ").append(toIndentedString(alias)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
