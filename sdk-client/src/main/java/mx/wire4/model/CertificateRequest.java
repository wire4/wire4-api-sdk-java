/*
 * Wire4RestAPI
 * Referencia de la API de Wire4
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package mx.wire4.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Certificado de la empresa que se está registrando.
 */
@Schema(description = "Certificado de la empresa que se está registrando.")


public class CertificateRequest {
  @SerializedName("alias")
  private String alias = null;

  @SerializedName("certificate_number")
  private String certificateNumber = null;

  @SerializedName("check_digit")
  private String checkDigit = null;

  @SerializedName("cipher_data")
  private String cipherData = null;

  public CertificateRequest alias(String alias) {
    this.alias = alias;
    return this;
  }

   /**
   * Es el alias del certificado.
   * @return alias
  **/
  @Schema(description = "Es el alias del certificado.")
  public String getAlias() {
    return alias;
  }

  public void setAlias(String alias) {
    this.alias = alias;
  }

  public CertificateRequest certificateNumber(String certificateNumber) {
    this.certificateNumber = certificateNumber;
    return this;
  }

   /**
   * Es el número de certificado.
   * @return certificateNumber
  **/
  @Schema(description = "Es el número de certificado.")
  public String getCertificateNumber() {
    return certificateNumber;
  }

  public void setCertificateNumber(String certificateNumber) {
    this.certificateNumber = certificateNumber;
  }

  public CertificateRequest checkDigit(String checkDigit) {
    this.checkDigit = checkDigit;
    return this;
  }

   /**
   * Es el dígito verificador. Máximo 3 dígitos.
   * @return checkDigit
  **/
  @Schema(description = "Es el dígito verificador. Máximo 3 dígitos.")
  public String getCheckDigit() {
    return checkDigit;
  }

  public void setCheckDigit(String checkDigit) {
    this.checkDigit = checkDigit;
  }

  public CertificateRequest cipherData(String cipherData) {
    this.cipherData = cipherData;
    return this;
  }

   /**
   * Es la información de cifrado.
   * @return cipherData
  **/
  @Schema(description = "Es la información de cifrado.")
  public String getCipherData() {
    return cipherData;
  }

  public void setCipherData(String cipherData) {
    this.cipherData = cipherData;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateRequest certificateRequest = (CertificateRequest) o;
    return Objects.equals(this.alias, certificateRequest.alias) &&
        Objects.equals(this.certificateNumber, certificateRequest.certificateNumber) &&
        Objects.equals(this.checkDigit, certificateRequest.checkDigit) &&
        Objects.equals(this.cipherData, certificateRequest.cipherData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alias, certificateNumber, checkDigit, cipherData);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateRequest {\n");
    
    sb.append("    alias: ").append(toIndentedString(alias)).append("\n");
    sb.append("    certificateNumber: ").append(toIndentedString(certificateNumber)).append("\n");
    sb.append("    checkDigit: ").append(toIndentedString(checkDigit)).append("\n");
    sb.append("    cipherData: ").append(toIndentedString(cipherData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
