/*
 * Wire4RestAPI
 * Referencia de la API de Wire4
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package mx.wire4.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * El mensaje que se envía mediante (webHook) con la información de la suscripción a esta a esta API
 */
@Schema(description = "El mensaje que se envía mediante (webHook) con la información de la suscripción a esta a esta API")

public class MessageSubscription {
  @SerializedName("contract")
  private String contract = null;

  @SerializedName("masked_contract")
  private String maskedContract = null;

  @SerializedName("subscription")
  private String subscription = null;

  @SerializedName("user")
  private String user = null;

  @SerializedName("user_key")
  private String userKey = null;

  @SerializedName("user_secret")
  private String userSecret = null;

  public MessageSubscription contract(String contract) {
    this.contract = contract;
    return this;
  }

   /**
   * Contrato Monex, con el cuál se suscribió el cliente Monex en Wire4
   * @return contract
  **/
  @Schema(description = "Contrato Monex, con el cuál se suscribió el cliente Monex en Wire4")
  public String getContract() {
    return contract;
  }

  public void setContract(String contract) {
    this.contract = contract;
  }

  public MessageSubscription maskedContract(String maskedContract) {
    this.maskedContract = maskedContract;
    return this;
  }

   /**
   * Contrato enmascarado de Monex, con el cuál se suscribió el cliente Monex en Wire4
   * @return maskedContract
  **/
  @Schema(description = "Contrato enmascarado de Monex, con el cuál se suscribió el cliente Monex en Wire4")
  public String getMaskedContract() {
    return maskedContract;
  }

  public void setMaskedContract(String maskedContract) {
    this.maskedContract = maskedContract;
  }

  public MessageSubscription subscription(String subscription) {
    this.subscription = subscription;
    return this;
  }

   /**
   * Identificador de la suscripción, el cual se utilizará en las operaciones que solicitan una suscripción
   * @return subscription
  **/
  @Schema(description = "Identificador de la suscripción, el cual se utilizará en las operaciones que solicitan una suscripción")
  public String getSubscription() {
    return subscription;
  }

  public void setSubscription(String subscription) {
    this.subscription = subscription;
  }

  public MessageSubscription user(String user) {
    this.user = user;
    return this;
  }

   /**
   * Usuario enmascardo, con el cuál se suscribió el cliente Monex en Wire4
   * @return user
  **/
  @Schema(description = "Usuario enmascardo, con el cuál se suscribió el cliente Monex en Wire4")
  public String getUser() {
    return user;
  }

  public void setUser(String user) {
    this.user = user;
  }

  public MessageSubscription userKey(String userKey) {
    this.userKey = userKey;
    return this;
  }

   /**
   * Usuario proporcionado por Wire4, el cuál se debe utilizar para autenticar a esta suscripción
   * @return userKey
  **/
  @Schema(description = "Usuario proporcionado por Wire4, el cuál se debe utilizar para autenticar a esta suscripción")
  public String getUserKey() {
    return userKey;
  }

  public void setUserKey(String userKey) {
    this.userKey = userKey;
  }

  public MessageSubscription userSecret(String userSecret) {
    this.userSecret = userSecret;
    return this;
  }

   /**
   * Contraseña proporcionada por Wire4, la cuál se debe utilizar para autenticar a esta suscripción
   * @return userSecret
  **/
  @Schema(description = "Contraseña proporcionada por Wire4, la cuál se debe utilizar para autenticar a esta suscripción")
  public String getUserSecret() {
    return userSecret;
  }

  public void setUserSecret(String userSecret) {
    this.userSecret = userSecret;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessageSubscription messageSubscription = (MessageSubscription) o;
    return Objects.equals(this.contract, messageSubscription.contract) &&
        Objects.equals(this.maskedContract, messageSubscription.maskedContract) &&
        Objects.equals(this.subscription, messageSubscription.subscription) &&
        Objects.equals(this.user, messageSubscription.user) &&
        Objects.equals(this.userKey, messageSubscription.userKey) &&
        Objects.equals(this.userSecret, messageSubscription.userSecret);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contract, maskedContract, subscription, user, userKey, userSecret);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessageSubscription {\n");
    
    sb.append("    contract: ").append(toIndentedString(contract)).append("\n");
    sb.append("    maskedContract: ").append(toIndentedString(maskedContract)).append("\n");
    sb.append("    subscription: ").append(toIndentedString(subscription)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userKey: ").append(toIndentedString(userKey)).append("\n");
    sb.append("    userSecret: ").append(toIndentedString(userSecret)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
