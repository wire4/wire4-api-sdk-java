/*
 * Wire4RestAPI
 * Referencia de la API de Wire4
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package mx.wire4.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
/**
 * Objeto que contiene la información de una transferencias SPEI de salida
 */
@Schema(description = "Objeto que contiene la información de una transferencias SPEI de salida")

public class TransactionOutgoing {
  @SerializedName("amount")
  private BigDecimal amount = null;

  @SerializedName("beneficiary_account")
  private String beneficiaryAccount = null;

  @SerializedName("beneficiary_bank_key")
  private String beneficiaryBankKey = null;

  @SerializedName("concept")
  private String concept = null;

  @SerializedName("currency_code")
  private String currencyCode = null;

  @SerializedName("email")
  private List<String> email = null;

  @SerializedName("order_id")
  private String orderId = null;

  @SerializedName("reference")
  private Integer reference = null;

  public TransactionOutgoing amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Monto de la transferencia
   * minimum: 0
   * @return amount
  **/
  @Schema(required = true, description = "Monto de la transferencia")
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }

  public TransactionOutgoing beneficiaryAccount(String beneficiaryAccount) {
    this.beneficiaryAccount = beneficiaryAccount;
    return this;
  }

   /**
   * Cuenta del beneficiario, podría ser un número celular, TDD o Cuenta CLABE interbancaria 
   * @return beneficiaryAccount
  **/
  @Schema(example = "cellphone: 5525072600, TDD: 4323 1234 5678 9123, clabe: 032180000118359719", required = true, description = "Cuenta del beneficiario, podría ser un número celular, TDD o Cuenta CLABE interbancaria ")
  public String getBeneficiaryAccount() {
    return beneficiaryAccount;
  }

  public void setBeneficiaryAccount(String beneficiaryAccount) {
    this.beneficiaryAccount = beneficiaryAccount;
  }

  public TransactionOutgoing beneficiaryBankKey(String beneficiaryBankKey) {
    this.beneficiaryBankKey = beneficiaryBankKey;
    return this;
  }

   /**
   * La clave del banco beneficiario, proprocionada por BANXICO, este campo solo es obligatario cuando la cuenta beneficiaria es un número celular (*).
   * @return beneficiaryBankKey
  **/
  @Schema(example = "40112", description = "La clave del banco beneficiario, proprocionada por BANXICO, este campo solo es obligatario cuando la cuenta beneficiaria es un número celular (*).")
  public String getBeneficiaryBankKey() {
    return beneficiaryBankKey;
  }

  public void setBeneficiaryBankKey(String beneficiaryBankKey) {
    this.beneficiaryBankKey = beneficiaryBankKey;
  }

  public TransactionOutgoing concept(String concept) {
    this.concept = concept;
    return this;
  }

   /**
   * Concepto de la transferencia
   * @return concept
  **/
  @Schema(required = true, description = "Concepto de la transferencia")
  public String getConcept() {
    return concept;
  }

  public void setConcept(String concept) {
    this.concept = concept;
  }

  public TransactionOutgoing currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * Código de moneda en la que opera la cuenta
   * @return currencyCode
  **/
  @Schema(required = true, description = "Código de moneda en la que opera la cuenta")
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }

  public TransactionOutgoing email(List<String> email) {
    this.email = email;
    return this;
  }

  public TransactionOutgoing addEmailItem(String emailItem) {
    if (this.email == null) {
      this.email = new ArrayList<>();
    }
    this.email.add(emailItem);
    return this;
  }

   /**
   * Lista de email del beneficiario,es opcional
   * @return email
  **/
  @Schema(description = "Lista de email del beneficiario,es opcional")
  public List<String> getEmail() {
    return email;
  }

  public void setEmail(List<String> email) {
    this.email = email;
  }

  public TransactionOutgoing orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

   /**
   * Referencia de la transferencia asignada por el cliente
   * @return orderId
  **/
  @Schema(example = "dae9c6ae-8c7a-42e8-99f4-ebe90566efae", required = true, description = "Referencia de la transferencia asignada por el cliente")
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }

  public TransactionOutgoing reference(Integer reference) {
    this.reference = reference;
    return this;
  }

   /**
   * Referencia numérica de la transferencia
   * minimum: 0
   * maximum: 9999999
   * @return reference
  **/
  @Schema(required = true, description = "Referencia numérica de la transferencia")
  public Integer getReference() {
    return reference;
  }

  public void setReference(Integer reference) {
    this.reference = reference;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionOutgoing transactionOutgoing = (TransactionOutgoing) o;
    return Objects.equals(this.amount, transactionOutgoing.amount) &&
        Objects.equals(this.beneficiaryAccount, transactionOutgoing.beneficiaryAccount) &&
        Objects.equals(this.beneficiaryBankKey, transactionOutgoing.beneficiaryBankKey) &&
        Objects.equals(this.concept, transactionOutgoing.concept) &&
        Objects.equals(this.currencyCode, transactionOutgoing.currencyCode) &&
        Objects.equals(this.email, transactionOutgoing.email) &&
        Objects.equals(this.orderId, transactionOutgoing.orderId) &&
        Objects.equals(this.reference, transactionOutgoing.reference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, beneficiaryAccount, beneficiaryBankKey, concept, currencyCode, email, orderId, reference);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionOutgoing {\n");
    
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    beneficiaryAccount: ").append(toIndentedString(beneficiaryAccount)).append("\n");
    sb.append("    beneficiaryBankKey: ").append(toIndentedString(beneficiaryBankKey)).append("\n");
    sb.append("    concept: ").append(toIndentedString(concept)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
