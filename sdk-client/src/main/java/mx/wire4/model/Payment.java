/*
 * Wire4RestAPI
 * Referencia de la API de Wire4
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package mx.wire4.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import mx.wire4.model.Institution;
import mx.wire4.model.MessageCEP;
/**
 * Payment
 */



public class Payment {
  @SerializedName("account")
  private String account = null;

  @SerializedName("amount")
  private BigDecimal amount = null;

  @SerializedName("beneficiary_account")
  private String beneficiaryAccount = null;

  @SerializedName("beneficiary_bank")
  private Institution beneficiaryBank = null;

  @SerializedName("beneficiary_name")
  private String beneficiaryName = null;

  @SerializedName("cep")
  private MessageCEP cep = null;

  @SerializedName("clave_rastreo")
  private String claveRastreo = null;

  @SerializedName("concept")
  private String concept = null;

  @SerializedName("confirm_date")
  private OffsetDateTime confirmDate = null;

  @SerializedName("currency_code")
  private String currencyCode = null;

  @SerializedName("detention_message")
  private String detentionMessage = null;

  @SerializedName("error_message")
  private String errorMessage = null;

  @SerializedName("monex_description")
  private String monexDescription = null;

  @SerializedName("order_id")
  private String orderId = null;

  @SerializedName("payment_order_id")
  private Integer paymentOrderId = null;

  @SerializedName("pending_reason")
  private String pendingReason = null;

  @SerializedName("reference")
  private Integer reference = null;

  @SerializedName("status_code")
  private String statusCode = null;

  @SerializedName("transaction_id")
  private Integer transactionId = null;

  public Payment account(String account) {
    this.account = account;
    return this;
  }

   /**
   * Es la cuenta emisora.
   * @return account
  **/
  @Schema(description = "Es la cuenta emisora.")
  public String getAccount() {
    return account;
  }

  public void setAccount(String account) {
    this.account = account;
  }

  public Payment amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Es el monto de la transferencia.
   * @return amount
  **/
  @Schema(description = "Es el monto de la transferencia.")
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }

  public Payment beneficiaryAccount(String beneficiaryAccount) {
    this.beneficiaryAccount = beneficiaryAccount;
    return this;
  }

   /**
   * Es la cuenta del beneficiario.
   * @return beneficiaryAccount
  **/
  @Schema(description = "Es la cuenta del beneficiario.")
  public String getBeneficiaryAccount() {
    return beneficiaryAccount;
  }

  public void setBeneficiaryAccount(String beneficiaryAccount) {
    this.beneficiaryAccount = beneficiaryAccount;
  }

  public Payment beneficiaryBank(Institution beneficiaryBank) {
    this.beneficiaryBank = beneficiaryBank;
    return this;
  }

   /**
   * Get beneficiaryBank
   * @return beneficiaryBank
  **/
  @Schema(description = "")
  public Institution getBeneficiaryBank() {
    return beneficiaryBank;
  }

  public void setBeneficiaryBank(Institution beneficiaryBank) {
    this.beneficiaryBank = beneficiaryBank;
  }

  public Payment beneficiaryName(String beneficiaryName) {
    this.beneficiaryName = beneficiaryName;
    return this;
  }

   /**
   * Es el nombre del Beneficiario.
   * @return beneficiaryName
  **/
  @Schema(description = "Es el nombre del Beneficiario.")
  public String getBeneficiaryName() {
    return beneficiaryName;
  }

  public void setBeneficiaryName(String beneficiaryName) {
    this.beneficiaryName = beneficiaryName;
  }

  public Payment cep(MessageCEP cep) {
    this.cep = cep;
    return this;
  }

   /**
   * Get cep
   * @return cep
  **/
  @Schema(description = "")
  public MessageCEP getCep() {
    return cep;
  }

  public void setCep(MessageCEP cep) {
    this.cep = cep;
  }

  public Payment claveRastreo(String claveRastreo) {
    this.claveRastreo = claveRastreo;
    return this;
  }

   /**
   * Es la clave de rastreo de la transferencia.
   * @return claveRastreo
  **/
  @Schema(description = "Es la clave de rastreo de la transferencia.")
  public String getClaveRastreo() {
    return claveRastreo;
  }

  public void setClaveRastreo(String claveRastreo) {
    this.claveRastreo = claveRastreo;
  }

  public Payment concept(String concept) {
    this.concept = concept;
    return this;
  }

   /**
   * Es el concepto de pago.
   * @return concept
  **/
  @Schema(description = "Es el concepto de pago.")
  public String getConcept() {
    return concept;
  }

  public void setConcept(String concept) {
    this.concept = concept;
  }

  public Payment confirmDate(OffsetDateTime confirmDate) {
    this.confirmDate = confirmDate;
    return this;
  }

   /**
   * Es la fecha de aplicación de la transferencia. Ésta fecha viene en formato ISO 8601 con zona horaria, ejemplo: &lt;strong&gt;2020-10-27T11:03:15.000-06:00&lt;/strong&gt;.
   * @return confirmDate
  **/
  @Schema(description = "Es la fecha de aplicación de la transferencia. Ésta fecha viene en formato ISO 8601 con zona horaria, ejemplo: <strong>2020-10-27T11:03:15.000-06:00</strong>.")
  public OffsetDateTime getConfirmDate() {
    return confirmDate;
  }

  public void setConfirmDate(OffsetDateTime confirmDate) {
    this.confirmDate = confirmDate;
  }

  public Payment currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * Es el código de divisa de la transferencia. Es en el formato estándar de 3 dígitos. Ejemplo del peso mexicano: &lt;b&gt;MXP&lt;/b&gt;, ejemplo del dólar estadounidense: &lt;b&gt;USD&lt;/b&gt;.
   * @return currencyCode
  **/
  @Schema(description = "Es el código de divisa de la transferencia. Es en el formato estándar de 3 dígitos. Ejemplo del peso mexicano: <b>MXP</b>, ejemplo del dólar estadounidense: <b>USD</b>.")
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }

  public Payment detentionMessage(String detentionMessage) {
    this.detentionMessage = detentionMessage;
    return this;
  }

   /**
   * Es el mensaje proporcionado por Monex para la transferencia.
   * @return detentionMessage
  **/
  @Schema(description = "Es el mensaje proporcionado por Monex para la transferencia.")
  public String getDetentionMessage() {
    return detentionMessage;
  }

  public void setDetentionMessage(String detentionMessage) {
    this.detentionMessage = detentionMessage;
  }

  public Payment errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

   /**
   * Es el mensaje de error, en caso de algún error se informará aquí.
   * @return errorMessage
  **/
  @Schema(description = "Es el mensaje de error, en caso de algún error se informará aquí.")
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }

  public Payment monexDescription(String monexDescription) {
    this.monexDescription = monexDescription;
    return this;
  }

   /**
   * Es la descripción de Monex.
   * @return monexDescription
  **/
  @Schema(description = "Es la descripción de Monex.")
  public String getMonexDescription() {
    return monexDescription;
  }

  public void setMonexDescription(String monexDescription) {
    this.monexDescription = monexDescription;
  }

  public Payment orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

   /**
   * Es el identificador asignado por la aplciación a la transferencia.
   * @return orderId
  **/
  @Schema(description = "Es el identificador asignado por la aplciación a la transferencia.")
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }

  public Payment paymentOrderId(Integer paymentOrderId) {
    this.paymentOrderId = paymentOrderId;
    return this;
  }

   /**
   * Es el identificador de la orden de pago en Monex.
   * @return paymentOrderId
  **/
  @Schema(description = "Es el identificador de la orden de pago en Monex.")
  public Integer getPaymentOrderId() {
    return paymentOrderId;
  }

  public void setPaymentOrderId(Integer paymentOrderId) {
    this.paymentOrderId = paymentOrderId;
  }

  public Payment pendingReason(String pendingReason) {
    this.pendingReason = pendingReason;
    return this;
  }

   /**
   * Es la razón de porque esta pendiente aún cuando se autorizó la transferencia.
   * @return pendingReason
  **/
  @Schema(description = "Es la razón de porque esta pendiente aún cuando se autorizó la transferencia.")
  public String getPendingReason() {
    return pendingReason;
  }

  public void setPendingReason(String pendingReason) {
    this.pendingReason = pendingReason;
  }

  public Payment reference(Integer reference) {
    this.reference = reference;
    return this;
  }

   /**
   * Es la referencia numérica.
   * @return reference
  **/
  @Schema(description = "Es la referencia numérica.")
  public Integer getReference() {
    return reference;
  }

  public void setReference(Integer reference) {
    this.reference = reference;
  }

  public Payment statusCode(String statusCode) {
    this.statusCode = statusCode;
    return this;
  }

   /**
   * Es el estado de la transferencia de la transferencia, los posibles valores son: &lt;b&gt;PENDING, COMPLETED, FAILED, CANCELLED&lt;/b&gt;
   * @return statusCode
  **/
  @Schema(description = "Es el estado de la transferencia de la transferencia, los posibles valores son: <b>PENDING, COMPLETED, FAILED, CANCELLED</b>")
  public String getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(String statusCode) {
    this.statusCode = statusCode;
  }

  public Payment transactionId(Integer transactionId) {
    this.transactionId = transactionId;
    return this;
  }

   /**
   * Es el identificador de la transferencia asignado por Monex.
   * @return transactionId
  **/
  @Schema(description = "Es el identificador de la transferencia asignado por Monex.")
  public Integer getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(Integer transactionId) {
    this.transactionId = transactionId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Payment payment = (Payment) o;
    return Objects.equals(this.account, payment.account) &&
        Objects.equals(this.amount, payment.amount) &&
        Objects.equals(this.beneficiaryAccount, payment.beneficiaryAccount) &&
        Objects.equals(this.beneficiaryBank, payment.beneficiaryBank) &&
        Objects.equals(this.beneficiaryName, payment.beneficiaryName) &&
        Objects.equals(this.cep, payment.cep) &&
        Objects.equals(this.claveRastreo, payment.claveRastreo) &&
        Objects.equals(this.concept, payment.concept) &&
        Objects.equals(this.confirmDate, payment.confirmDate) &&
        Objects.equals(this.currencyCode, payment.currencyCode) &&
        Objects.equals(this.detentionMessage, payment.detentionMessage) &&
        Objects.equals(this.errorMessage, payment.errorMessage) &&
        Objects.equals(this.monexDescription, payment.monexDescription) &&
        Objects.equals(this.orderId, payment.orderId) &&
        Objects.equals(this.paymentOrderId, payment.paymentOrderId) &&
        Objects.equals(this.pendingReason, payment.pendingReason) &&
        Objects.equals(this.reference, payment.reference) &&
        Objects.equals(this.statusCode, payment.statusCode) &&
        Objects.equals(this.transactionId, payment.transactionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, amount, beneficiaryAccount, beneficiaryBank, beneficiaryName, cep, claveRastreo, concept, confirmDate, currencyCode, detentionMessage, errorMessage, monexDescription, orderId, paymentOrderId, pendingReason, reference, statusCode, transactionId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Payment {\n");
    
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    beneficiaryAccount: ").append(toIndentedString(beneficiaryAccount)).append("\n");
    sb.append("    beneficiaryBank: ").append(toIndentedString(beneficiaryBank)).append("\n");
    sb.append("    beneficiaryName: ").append(toIndentedString(beneficiaryName)).append("\n");
    sb.append("    cep: ").append(toIndentedString(cep)).append("\n");
    sb.append("    claveRastreo: ").append(toIndentedString(claveRastreo)).append("\n");
    sb.append("    concept: ").append(toIndentedString(concept)).append("\n");
    sb.append("    confirmDate: ").append(toIndentedString(confirmDate)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    detentionMessage: ").append(toIndentedString(detentionMessage)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    monexDescription: ").append(toIndentedString(monexDescription)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    paymentOrderId: ").append(toIndentedString(paymentOrderId)).append("\n");
    sb.append("    pendingReason: ").append(toIndentedString(pendingReason)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
