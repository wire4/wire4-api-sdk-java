/*
 * Wire4RestAPI
 * Referencia de API. La API de Wire4 está organizada en torno a REST.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package mx.wire4.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import mx.wire4.model.CertificateRequest;
/**
 * Contiene la información de la empresa que se quiere registrar
 */
@Schema(description = "Contiene la información de la empresa que se quiere registrar")

public class CompanyRequested {
  @SerializedName("business_name")
  private String businessName = null;

  @SerializedName("certificate")
  private CertificateRequest certificate = null;

  @SerializedName("comercial_name")
  private String comercialName = null;

  @SerializedName("rfc")
  private String rfc = null;

  public CompanyRequested businessName(String businessName) {
    this.businessName = businessName;
    return this;
  }

   /**
   * Nombre de la empresa que se va a registrar
   * @return businessName
  **/
  @Schema(description = "Nombre de la empresa que se va a registrar")
  public String getBusinessName() {
    return businessName;
  }

  public void setBusinessName(String businessName) {
    this.businessName = businessName;
  }

  public CompanyRequested certificate(CertificateRequest certificate) {
    this.certificate = certificate;
    return this;
  }

   /**
   * Get certificate
   * @return certificate
  **/
  @Schema(description = "")
  public CertificateRequest getCertificate() {
    return certificate;
  }

  public void setCertificate(CertificateRequest certificate) {
    this.certificate = certificate;
  }

  public CompanyRequested comercialName(String comercialName) {
    this.comercialName = comercialName;
    return this;
  }

   /**
   * Nombre comercial de la empresa que se va a registrar
   * @return comercialName
  **/
  @Schema(description = "Nombre comercial de la empresa que se va a registrar")
  public String getComercialName() {
    return comercialName;
  }

  public void setComercialName(String comercialName) {
    this.comercialName = comercialName;
  }

  public CompanyRequested rfc(String rfc) {
    this.rfc = rfc;
    return this;
  }

   /**
   * RFC de la empresa que se va a registrar
   * @return rfc
  **/
  @Schema(description = "RFC de la empresa que se va a registrar")
  public String getRfc() {
    return rfc;
  }

  public void setRfc(String rfc) {
    this.rfc = rfc;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompanyRequested companyRequested = (CompanyRequested) o;
    return Objects.equals(this.businessName, companyRequested.businessName) &&
        Objects.equals(this.certificate, companyRequested.certificate) &&
        Objects.equals(this.comercialName, companyRequested.comercialName) &&
        Objects.equals(this.rfc, companyRequested.rfc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(businessName, certificate, comercialName, rfc);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompanyRequested {\n");
    
    sb.append("    businessName: ").append(toIndentedString(businessName)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    comercialName: ").append(toIndentedString(comercialName)).append("\n");
    sb.append("    rfc: ").append(toIndentedString(rfc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
