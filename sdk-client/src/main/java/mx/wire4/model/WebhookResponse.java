/*
 * Wire4RestAPI
 * Referencia de API. La API de Wire4 está organizada en torno a REST.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package mx.wire4.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Objeto que contiene la información de un webhook.
 */
@Schema(description = "Objeto que contiene la información de un webhook.")

public class WebhookResponse {
  @SerializedName("events")
  private List<String> events = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("secret")
  private String secret = null;

  /**
   * Estatus en el que se encuentra el webhook
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("ACTIVE"),
    INACTIVE("INACTIVE"),
    DELETED("DELETED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("url")
  private String url = null;

  @SerializedName("wh_uuid")
  private String whUuid = null;

  public WebhookResponse events(List<String> events) {
    this.events = events;
    return this;
  }

  public WebhookResponse addEventsItem(String eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

   /**
   * Tipos de eventos de los cuales Wire4 te enviará información.
   * @return events
  **/
  @Schema(description = "Tipos de eventos de los cuales Wire4 te enviará información.")
  public List<String> getEvents() {
    return events;
  }

  public void setEvents(List<String> events) {
    this.events = events;
  }

  public WebhookResponse name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Nombre del webhook.
   * @return name
  **/
  @Schema(description = "Nombre del webhook.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public WebhookResponse secret(String secret) {
    this.secret = secret;
    return this;
  }

   /**
   * Llave con la cual se debe de identificar que el webhook fue enviado por Wire4, para mayor información revisar la guía de notificaciones (https://wire4.mx/#/guides/notificaciones), en la sección de  \&quot;Comprobación de firmas de Webhook\&quot;.
   * @return secret
  **/
  @Schema(description = "Llave con la cual se debe de identificar que el webhook fue enviado por Wire4, para mayor información revisar la guía de notificaciones (https://wire4.mx/#/guides/notificaciones), en la sección de  \"Comprobación de firmas de Webhook\".")
  public String getSecret() {
    return secret;
  }

  public void setSecret(String secret) {
    this.secret = secret;
  }

  public WebhookResponse status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Estatus en el que se encuentra el webhook
   * @return status
  **/
  @Schema(description = "Estatus en el que se encuentra el webhook")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public WebhookResponse url(String url) {
    this.url = url;
    return this;
  }

   /**
   * URL a la cual Wire4 enviará las notificaciones cuando un evento ocurra.
   * @return url
  **/
  @Schema(description = "URL a la cual Wire4 enviará las notificaciones cuando un evento ocurra.")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public WebhookResponse whUuid(String whUuid) {
    this.whUuid = whUuid;
    return this;
  }

   /**
   * Identificador del webhook.
   * @return whUuid
  **/
  @Schema(description = "Identificador del webhook.")
  public String getWhUuid() {
    return whUuid;
  }

  public void setWhUuid(String whUuid) {
    this.whUuid = whUuid;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookResponse webhookResponse = (WebhookResponse) o;
    return Objects.equals(this.events, webhookResponse.events) &&
        Objects.equals(this.name, webhookResponse.name) &&
        Objects.equals(this.secret, webhookResponse.secret) &&
        Objects.equals(this.status, webhookResponse.status) &&
        Objects.equals(this.url, webhookResponse.url) &&
        Objects.equals(this.whUuid, webhookResponse.whUuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(events, name, secret, status, url, whUuid);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookResponse {\n");
    
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    whUuid: ").append(toIndentedString(whUuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
