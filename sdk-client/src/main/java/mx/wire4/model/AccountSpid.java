/*
 * Wire4RestAPI
 * Referencia de la API de Wire4
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package mx.wire4.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import mx.wire4.model.BeneficiaryInstitution;
/**
 * Objeto que contiene información de la cuenta
 */
@Schema(description = "Objeto que contiene información de la cuenta")


public class AccountSpid {
  @SerializedName("amount_limit")
  private BigDecimal amountLimit = null;

  @SerializedName("bank_code_banxico")
  private String bankCodeBanxico = null;

  @SerializedName("beneficiary_account")
  private String beneficiaryAccount = null;

  @SerializedName("cancel_return_url")
  private String cancelReturnUrl = null;

  @SerializedName("email")
  private List<String> email = null;

  @SerializedName("institution")
  private BeneficiaryInstitution institution = null;

  @SerializedName("kind_of_relationship")
  private String kindOfRelationship = null;

  @SerializedName("numeric_reference")
  private String numericReference = null;

  @SerializedName("payment_concept")
  private String paymentConcept = null;

  @SerializedName("relationship")
  private String relationship = null;

  @SerializedName("return_url")
  private String returnUrl = null;

  @SerializedName("rfc")
  private String rfc = null;

  public AccountSpid amountLimit(BigDecimal amountLimit) {
    this.amountLimit = amountLimit;
    return this;
  }

   /**
   * Monto límite permitido para la cuenta. Ejemplo: 1000.00
   * @return amountLimit
  **/
  @Schema(required = true, description = "Monto límite permitido para la cuenta. Ejemplo: 1000.00")
  public BigDecimal getAmountLimit() {
    return amountLimit;
  }

  public void setAmountLimit(BigDecimal amountLimit) {
    this.amountLimit = amountLimit;
  }

  public AccountSpid bankCodeBanxico(String bankCodeBanxico) {
    this.bankCodeBanxico = bankCodeBanxico;
    return this;
  }

   /**
   * Es el código banxico con una longitud de 5 dígitos, es requerido en caso de que la cuenta del beneficiario sea un número de celular.
   * @return bankCodeBanxico
  **/
  @Schema(description = "Es el código banxico con una longitud de 5 dígitos, es requerido en caso de que la cuenta del beneficiario sea un número de celular.")
  public String getBankCodeBanxico() {
    return bankCodeBanxico;
  }

  public void setBankCodeBanxico(String bankCodeBanxico) {
    this.bankCodeBanxico = bankCodeBanxico;
  }

  public AccountSpid beneficiaryAccount(String beneficiaryAccount) {
    this.beneficiaryAccount = beneficiaryAccount;
    return this;
  }

   /**
   * Cuenta del beneficiario debe ser una cuenta CLABE. Ejemplo: 032180000118359719.
   * @return beneficiaryAccount
  **/
  @Schema(example = "CLABE: 032180000118359719", required = true, description = "Cuenta del beneficiario debe ser una cuenta CLABE. Ejemplo: 032180000118359719.")
  public String getBeneficiaryAccount() {
    return beneficiaryAccount;
  }

  public void setBeneficiaryAccount(String beneficiaryAccount) {
    this.beneficiaryAccount = beneficiaryAccount;
  }

  public AccountSpid cancelReturnUrl(String cancelReturnUrl) {
    this.cancelReturnUrl = cancelReturnUrl;
    return this;
  }

   /**
   * Es la dirección URL a la que se redirigirá en caso de que el cliente cancele el registro. Se valida hasta 512 caracteres.
   * @return cancelReturnUrl
  **/
  @Schema(description = "Es la dirección URL a la que se redirigirá en caso de que el cliente cancele el registro. Se valida hasta 512 caracteres.")
  public String getCancelReturnUrl() {
    return cancelReturnUrl;
  }

  public void setCancelReturnUrl(String cancelReturnUrl) {
    this.cancelReturnUrl = cancelReturnUrl;
  }

  public AccountSpid email(List<String> email) {
    this.email = email;
    return this;
  }

  public AccountSpid addEmailItem(String emailItem) {
    if (this.email == null) {
      this.email = new ArrayList<>();
    }
    this.email.add(emailItem);
    return this;
  }

   /**
   * Lista de correos electrónicos (emails), este dato es opcional.
   * @return email
  **/
  @Schema(description = "Lista de correos electrónicos (emails), este dato es opcional.")
  public List<String> getEmail() {
    return email;
  }

  public void setEmail(List<String> email) {
    this.email = email;
  }

  public AccountSpid institution(BeneficiaryInstitution institution) {
    this.institution = institution;
    return this;
  }

   /**
   * Get institution
   * @return institution
  **/
  @Schema(required = true, description = "")
  public BeneficiaryInstitution getInstitution() {
    return institution;
  }

  public void setInstitution(BeneficiaryInstitution institution) {
    this.institution = institution;
  }

  public AccountSpid kindOfRelationship(String kindOfRelationship) {
    this.kindOfRelationship = kindOfRelationship;
    return this;
  }

   /**
   * Es el tipo de relación que se tiene con el propietario de la cuenta. Para registrar una cuenta, este valor se debe obtener del recurso &lt;a href&#x3D;\&quot;#operation/getAvailableRelationshipsMonexUsingGET\&quot;&gt; relationships.&lt;/a&gt; &lt;br /&gt;&lt;br /&gt;&lt;b&gt;Nota:&lt;/b&gt; &lt;em&gt;Si en la respuesta de Monex esta propiedad es nula, tampoco estará presente en esta respuesta.&lt;/em&gt;
   * @return kindOfRelationship
  **/
  @Schema(required = true, description = "Es el tipo de relación que se tiene con el propietario de la cuenta. Para registrar una cuenta, este valor se debe obtener del recurso <a href=\"#operation/getAvailableRelationshipsMonexUsingGET\"> relationships.</a> <br /><br /><b>Nota:</b> <em>Si en la respuesta de Monex esta propiedad es nula, tampoco estará presente en esta respuesta.</em>")
  public String getKindOfRelationship() {
    return kindOfRelationship;
  }

  public void setKindOfRelationship(String kindOfRelationship) {
    this.kindOfRelationship = kindOfRelationship;
  }

  public AccountSpid numericReference(String numericReference) {
    this.numericReference = numericReference;
    return this;
  }

   /**
   * Es la referencia numérica.
   * @return numericReference
  **/
  @Schema(description = "Es la referencia numérica.")
  public String getNumericReference() {
    return numericReference;
  }

  public void setNumericReference(String numericReference) {
    this.numericReference = numericReference;
  }

  public AccountSpid paymentConcept(String paymentConcept) {
    this.paymentConcept = paymentConcept;
    return this;
  }

   /**
   * Es el concepto de pago.
   * @return paymentConcept
  **/
  @Schema(description = "Es el concepto de pago.")
  public String getPaymentConcept() {
    return paymentConcept;
  }

  public void setPaymentConcept(String paymentConcept) {
    this.paymentConcept = paymentConcept;
  }

  public AccountSpid relationship(String relationship) {
    this.relationship = relationship;
    return this;
  }

   /**
   * Es la relación con el propietario de la cuenta, para registrar este valor se debe obtener del recurso &lt;a href&#x3D;\&quot;#operation/getAvailableRelationshipsMonexUsingGET\&quot;&gt;relationships.&lt;/a&gt; &lt;br/&gt; &lt;br/&gt; &lt;b&gt;Nota:&lt;/b&gt; Si en la respuesta de Monex, sta propiedad es nula, tampoco estará presente en esta respuesta.
   * @return relationship
  **/
  @Schema(required = true, description = "Es la relación con el propietario de la cuenta, para registrar este valor se debe obtener del recurso <a href=\"#operation/getAvailableRelationshipsMonexUsingGET\">relationships.</a> <br/> <br/> <b>Nota:</b> Si en la respuesta de Monex, sta propiedad es nula, tampoco estará presente en esta respuesta.")
  public String getRelationship() {
    return relationship;
  }

  public void setRelationship(String relationship) {
    this.relationship = relationship;
  }

  public AccountSpid returnUrl(String returnUrl) {
    this.returnUrl = returnUrl;
    return this;
  }

   /**
   * Es la dirección URL a la que se redirigirá en caso exitoso. Se valida hasta 512 caracteres.
   * @return returnUrl
  **/
  @Schema(description = "Es la dirección URL a la que se redirigirá en caso exitoso. Se valida hasta 512 caracteres.")
  public String getReturnUrl() {
    return returnUrl;
  }

  public void setReturnUrl(String returnUrl) {
    this.returnUrl = returnUrl;
  }

  public AccountSpid rfc(String rfc) {
    this.rfc = rfc;
    return this;
  }

   /**
   * Es el Registro federal de contribuyentes (RFC) de la persona o institución propietaria de la cuenta. &lt;br/&gt; &lt;br/&gt;&lt;b&gt;Nota:&lt;/b&gt; Se valida el formato de RFC.
   * @return rfc
  **/
  @Schema(description = "Es el Registro federal de contribuyentes (RFC) de la persona o institución propietaria de la cuenta. <br/> <br/><b>Nota:</b> Se valida el formato de RFC.")
  public String getRfc() {
    return rfc;
  }

  public void setRfc(String rfc) {
    this.rfc = rfc;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountSpid accountSpid = (AccountSpid) o;
    return Objects.equals(this.amountLimit, accountSpid.amountLimit) &&
        Objects.equals(this.bankCodeBanxico, accountSpid.bankCodeBanxico) &&
        Objects.equals(this.beneficiaryAccount, accountSpid.beneficiaryAccount) &&
        Objects.equals(this.cancelReturnUrl, accountSpid.cancelReturnUrl) &&
        Objects.equals(this.email, accountSpid.email) &&
        Objects.equals(this.institution, accountSpid.institution) &&
        Objects.equals(this.kindOfRelationship, accountSpid.kindOfRelationship) &&
        Objects.equals(this.numericReference, accountSpid.numericReference) &&
        Objects.equals(this.paymentConcept, accountSpid.paymentConcept) &&
        Objects.equals(this.relationship, accountSpid.relationship) &&
        Objects.equals(this.returnUrl, accountSpid.returnUrl) &&
        Objects.equals(this.rfc, accountSpid.rfc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountLimit, bankCodeBanxico, beneficiaryAccount, cancelReturnUrl, email, institution, kindOfRelationship, numericReference, paymentConcept, relationship, returnUrl, rfc);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountSpid {\n");
    
    sb.append("    amountLimit: ").append(toIndentedString(amountLimit)).append("\n");
    sb.append("    bankCodeBanxico: ").append(toIndentedString(bankCodeBanxico)).append("\n");
    sb.append("    beneficiaryAccount: ").append(toIndentedString(beneficiaryAccount)).append("\n");
    sb.append("    cancelReturnUrl: ").append(toIndentedString(cancelReturnUrl)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    institution: ").append(toIndentedString(institution)).append("\n");
    sb.append("    kindOfRelationship: ").append(toIndentedString(kindOfRelationship)).append("\n");
    sb.append("    numericReference: ").append(toIndentedString(numericReference)).append("\n");
    sb.append("    paymentConcept: ").append(toIndentedString(paymentConcept)).append("\n");
    sb.append("    relationship: ").append(toIndentedString(relationship)).append("\n");
    sb.append("    returnUrl: ").append(toIndentedString(returnUrl)).append("\n");
    sb.append("    rfc: ").append(toIndentedString(rfc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
