/*
 * Wire4RestAPI
 * Referencia de API. La API de Wire4 está organizada en torno a REST.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package mx.wire4.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import mx.wire4.model.MessageCEP;
import mx.wire4.model.MessageInstitution;
/**
 * El mensaje que se envía mediante (webHook) con la información de la transferencia de salida realizada
 */
@Schema(description = "El mensaje que se envía mediante (webHook) con la información de la transferencia de salida realizada")

public class MessagePayment {
  @SerializedName("account")
  private String account = null;

  @SerializedName("amount")
  private BigDecimal amount = null;

  @SerializedName("beneficiary_account")
  private String beneficiaryAccount = null;

  @SerializedName("beneficiary_bank")
  private MessageInstitution beneficiaryBank = null;

  @SerializedName("beneficiary_name")
  private String beneficiaryName = null;

  @SerializedName("cep")
  private MessageCEP cep = null;

  @SerializedName("clave_rastreo")
  private String claveRastreo = null;

  @SerializedName("concept")
  private String concept = null;

  @SerializedName("confirm_date")
  private OffsetDateTime confirmDate = null;

  @SerializedName("currency_code")
  private String currencyCode = null;

  @SerializedName("detention_message")
  private String detentionMessage = null;

  @SerializedName("error_message")
  private String errorMessage = null;

  @SerializedName("monex_description")
  private String monexDescription = null;

  @SerializedName("order_id")
  private String orderId = null;

  @SerializedName("payment_order_id")
  private Integer paymentOrderId = null;

  @SerializedName("pending_reason")
  private String pendingReason = null;

  @SerializedName("reference")
  private Integer reference = null;

  @SerializedName("request_id")
  private String requestId = null;

  @SerializedName("status_code")
  private String statusCode = null;

  @SerializedName("transaction_id")
  private Integer transactionId = null;

  public MessagePayment account(String account) {
    this.account = account;
    return this;
  }

   /**
   * Cuenta del ordenante
   * @return account
  **/
  @Schema(description = "Cuenta del ordenante")
  public String getAccount() {
    return account;
  }

  public void setAccount(String account) {
    this.account = account;
  }

  public MessagePayment amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Monto de la transferencia
   * @return amount
  **/
  @Schema(description = "Monto de la transferencia")
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }

  public MessagePayment beneficiaryAccount(String beneficiaryAccount) {
    this.beneficiaryAccount = beneficiaryAccount;
    return this;
  }

   /**
   * Cuenta del beneficiario
   * @return beneficiaryAccount
  **/
  @Schema(description = "Cuenta del beneficiario")
  public String getBeneficiaryAccount() {
    return beneficiaryAccount;
  }

  public void setBeneficiaryAccount(String beneficiaryAccount) {
    this.beneficiaryAccount = beneficiaryAccount;
  }

  public MessagePayment beneficiaryBank(MessageInstitution beneficiaryBank) {
    this.beneficiaryBank = beneficiaryBank;
    return this;
  }

   /**
   * Get beneficiaryBank
   * @return beneficiaryBank
  **/
  @Schema(description = "")
  public MessageInstitution getBeneficiaryBank() {
    return beneficiaryBank;
  }

  public void setBeneficiaryBank(MessageInstitution beneficiaryBank) {
    this.beneficiaryBank = beneficiaryBank;
  }

  public MessagePayment beneficiaryName(String beneficiaryName) {
    this.beneficiaryName = beneficiaryName;
    return this;
  }

   /**
   * Nombre del beneficiario
   * @return beneficiaryName
  **/
  @Schema(description = "Nombre del beneficiario")
  public String getBeneficiaryName() {
    return beneficiaryName;
  }

  public void setBeneficiaryName(String beneficiaryName) {
    this.beneficiaryName = beneficiaryName;
  }

  public MessagePayment cep(MessageCEP cep) {
    this.cep = cep;
    return this;
  }

   /**
   * Get cep
   * @return cep
  **/
  @Schema(description = "")
  public MessageCEP getCep() {
    return cep;
  }

  public void setCep(MessageCEP cep) {
    this.cep = cep;
  }

  public MessagePayment claveRastreo(String claveRastreo) {
    this.claveRastreo = claveRastreo;
    return this;
  }

   /**
   * Clave de rastreo de la transferencia
   * @return claveRastreo
  **/
  @Schema(description = "Clave de rastreo de la transferencia")
  public String getClaveRastreo() {
    return claveRastreo;
  }

  public void setClaveRastreo(String claveRastreo) {
    this.claveRastreo = claveRastreo;
  }

  public MessagePayment concept(String concept) {
    this.concept = concept;
    return this;
  }

   /**
   * Concepto de la transferencia de salida
   * @return concept
  **/
  @Schema(description = "Concepto de la transferencia de salida")
  public String getConcept() {
    return concept;
  }

  public void setConcept(String concept) {
    this.concept = concept;
  }

  public MessagePayment confirmDate(OffsetDateTime confirmDate) {
    this.confirmDate = confirmDate;
    return this;
  }

   /**
   * Fecha de confirmación de la transferencia de salida
   * @return confirmDate
  **/
  @Schema(description = "Fecha de confirmación de la transferencia de salida")
  public OffsetDateTime getConfirmDate() {
    return confirmDate;
  }

  public void setConfirmDate(OffsetDateTime confirmDate) {
    this.confirmDate = confirmDate;
  }

  public MessagePayment currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * Código de la moneda de la transferencia de salida
   * @return currencyCode
  **/
  @Schema(description = "Código de la moneda de la transferencia de salida")
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }

  public MessagePayment detentionMessage(String detentionMessage) {
    this.detentionMessage = detentionMessage;
    return this;
  }

   /**
   * Mensaje de detención de Monex de la transferencia de salida
   * @return detentionMessage
  **/
  @Schema(description = "Mensaje de detención de Monex de la transferencia de salida")
  public String getDetentionMessage() {
    return detentionMessage;
  }

  public void setDetentionMessage(String detentionMessage) {
    this.detentionMessage = detentionMessage;
  }

  public MessagePayment errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

   /**
   * Mensaje de error
   * @return errorMessage
  **/
  @Schema(description = "Mensaje de error")
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }

  public MessagePayment monexDescription(String monexDescription) {
    this.monexDescription = monexDescription;
    return this;
  }

   /**
   * La descripción de Monex de la transferencia de salida
   * @return monexDescription
  **/
  @Schema(description = "La descripción de Monex de la transferencia de salida")
  public String getMonexDescription() {
    return monexDescription;
  }

  public void setMonexDescription(String monexDescription) {
    this.monexDescription = monexDescription;
  }

  public MessagePayment orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

   /**
   * El identificador de la transferencia de salida
   * @return orderId
  **/
  @Schema(description = "El identificador de la transferencia de salida")
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }

  public MessagePayment paymentOrderId(Integer paymentOrderId) {
    this.paymentOrderId = paymentOrderId;
    return this;
  }

   /**
   * El identificador de la orden de pago de Monex de la transferencia de salida
   * @return paymentOrderId
  **/
  @Schema(description = "El identificador de la orden de pago de Monex de la transferencia de salida")
  public Integer getPaymentOrderId() {
    return paymentOrderId;
  }

  public void setPaymentOrderId(Integer paymentOrderId) {
    this.paymentOrderId = paymentOrderId;
  }

  public MessagePayment pendingReason(String pendingReason) {
    this.pendingReason = pendingReason;
    return this;
  }

   /**
   * Razón de porque está pendiente aún cuando se autorizó la transferencia
   * @return pendingReason
  **/
  @Schema(description = "Razón de porque está pendiente aún cuando se autorizó la transferencia")
  public String getPendingReason() {
    return pendingReason;
  }

  public void setPendingReason(String pendingReason) {
    this.pendingReason = pendingReason;
  }

  public MessagePayment reference(Integer reference) {
    this.reference = reference;
    return this;
  }

   /**
   * Referecia de la transferencia
   * @return reference
  **/
  @Schema(description = "Referecia de la transferencia")
  public Integer getReference() {
    return reference;
  }

  public void setReference(Integer reference) {
    this.reference = reference;
  }

  public MessagePayment requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

   /**
   * El identificador, en esta API, de la petición de envío de la transferencia de salida
   * @return requestId
  **/
  @Schema(description = "El identificador, en esta API, de la petición de envío de la transferencia de salida")
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }

  public MessagePayment statusCode(String statusCode) {
    this.statusCode = statusCode;
    return this;
  }

   /**
   * El estado de la transferencia de salida
   * @return statusCode
  **/
  @Schema(description = "El estado de la transferencia de salida")
  public String getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(String statusCode) {
    this.statusCode = statusCode;
  }

  public MessagePayment transactionId(Integer transactionId) {
    this.transactionId = transactionId;
    return this;
  }

   /**
   * El identificador de Monex de la transferencia de salida
   * @return transactionId
  **/
  @Schema(description = "El identificador de Monex de la transferencia de salida")
  public Integer getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(Integer transactionId) {
    this.transactionId = transactionId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessagePayment messagePayment = (MessagePayment) o;
    return Objects.equals(this.account, messagePayment.account) &&
        Objects.equals(this.amount, messagePayment.amount) &&
        Objects.equals(this.beneficiaryAccount, messagePayment.beneficiaryAccount) &&
        Objects.equals(this.beneficiaryBank, messagePayment.beneficiaryBank) &&
        Objects.equals(this.beneficiaryName, messagePayment.beneficiaryName) &&
        Objects.equals(this.cep, messagePayment.cep) &&
        Objects.equals(this.claveRastreo, messagePayment.claveRastreo) &&
        Objects.equals(this.concept, messagePayment.concept) &&
        Objects.equals(this.confirmDate, messagePayment.confirmDate) &&
        Objects.equals(this.currencyCode, messagePayment.currencyCode) &&
        Objects.equals(this.detentionMessage, messagePayment.detentionMessage) &&
        Objects.equals(this.errorMessage, messagePayment.errorMessage) &&
        Objects.equals(this.monexDescription, messagePayment.monexDescription) &&
        Objects.equals(this.orderId, messagePayment.orderId) &&
        Objects.equals(this.paymentOrderId, messagePayment.paymentOrderId) &&
        Objects.equals(this.pendingReason, messagePayment.pendingReason) &&
        Objects.equals(this.reference, messagePayment.reference) &&
        Objects.equals(this.requestId, messagePayment.requestId) &&
        Objects.equals(this.statusCode, messagePayment.statusCode) &&
        Objects.equals(this.transactionId, messagePayment.transactionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, amount, beneficiaryAccount, beneficiaryBank, beneficiaryName, cep, claveRastreo, concept, confirmDate, currencyCode, detentionMessage, errorMessage, monexDescription, orderId, paymentOrderId, pendingReason, reference, requestId, statusCode, transactionId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessagePayment {\n");
    
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    beneficiaryAccount: ").append(toIndentedString(beneficiaryAccount)).append("\n");
    sb.append("    beneficiaryBank: ").append(toIndentedString(beneficiaryBank)).append("\n");
    sb.append("    beneficiaryName: ").append(toIndentedString(beneficiaryName)).append("\n");
    sb.append("    cep: ").append(toIndentedString(cep)).append("\n");
    sb.append("    claveRastreo: ").append(toIndentedString(claveRastreo)).append("\n");
    sb.append("    concept: ").append(toIndentedString(concept)).append("\n");
    sb.append("    confirmDate: ").append(toIndentedString(confirmDate)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    detentionMessage: ").append(toIndentedString(detentionMessage)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    monexDescription: ").append(toIndentedString(monexDescription)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    paymentOrderId: ").append(toIndentedString(paymentOrderId)).append("\n");
    sb.append("    pendingReason: ").append(toIndentedString(pendingReason)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
