/*
 * Wire4RestAPI
 * Referencia de la API de Wire4
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package mx.wire4.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
/**
 * Objeto que contiene la informaci贸n del pago realizado
 */
@Schema(description = "Objeto que contiene la informaci贸n del pago realizado")

public class PaymentCODI {
  @SerializedName("amount")
  private BigDecimal amount = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("error_message")
  private String errorMessage = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("operation_date")
  private OffsetDateTime operationDate = null;

  /**
   * Estatus del pago
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    RECEIVED("RECEIVED"),
    COMPLETED("COMPLETED"),
    CANCELLED("CANCELLED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  public PaymentCODI amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Monto del pago
   * @return amount
  **/
  @Schema(description = "Monto del pago")
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }

  public PaymentCODI description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Descripci贸n del pago
   * @return description
  **/
  @Schema(description = "Descripci贸n del pago")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public PaymentCODI errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

   /**
   * Mensaje de error
   * @return errorMessage
  **/
  @Schema(description = "Mensaje de error")
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }

  public PaymentCODI id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Identificador del pago
   * @return id
  **/
  @Schema(description = "Identificador del pago")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public PaymentCODI operationDate(OffsetDateTime operationDate) {
    this.operationDate = operationDate;
    return this;
  }

   /**
   * Fecha en que se efectuo el pago
   * @return operationDate
  **/
  @Schema(description = "Fecha en que se efectuo el pago")
  public OffsetDateTime getOperationDate() {
    return operationDate;
  }

  public void setOperationDate(OffsetDateTime operationDate) {
    this.operationDate = operationDate;
  }

  public PaymentCODI status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Estatus del pago
   * @return status
  **/
  @Schema(description = "Estatus del pago")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentCODI paymentCODI = (PaymentCODI) o;
    return Objects.equals(this.amount, paymentCODI.amount) &&
        Objects.equals(this.description, paymentCODI.description) &&
        Objects.equals(this.errorMessage, paymentCODI.errorMessage) &&
        Objects.equals(this.id, paymentCODI.id) &&
        Objects.equals(this.operationDate, paymentCODI.operationDate) &&
        Objects.equals(this.status, paymentCODI.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, description, errorMessage, id, operationDate, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentCODI {\n");
    
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    operationDate: ").append(toIndentedString(operationDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
