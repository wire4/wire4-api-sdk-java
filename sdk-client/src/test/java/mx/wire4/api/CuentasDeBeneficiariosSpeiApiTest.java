/*
 * Wire4RestAPI
 * Referencia de la API de Wire4
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package mx.wire4.api;

import mx.wire4.ApiException;
import mx.wire4.model.AccountRequest;
import mx.wire4.model.AmountRequest;
import mx.wire4.model.BeneficiariesResponse;
import mx.wire4.model.ErrorResponse;
import mx.wire4.model.RelationshipsResponse;
import mx.wire4.model.TokenRequiredResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CuentasDeBeneficiariosSpeiApi
 */
@Ignore
public class CuentasDeBeneficiariosSpeiApiTest {

    private final CuentasDeBeneficiariosSpeiApi api = new CuentasDeBeneficiariosSpeiApi();

    /**
     * Elimina la cuenta del beneficiario
     *
     * Borra la cuenta de beneficiario proporcionada relacionada al contrato perteneciente a la subscripción. La cuenta a borrar debe ser una cuenta que opere con SPEI.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAccountUsingDELETETest() throws ApiException {
        String authorization = null;
        String account = null;
        String subscription = null;
        api.deleteAccountUsingDELETE(authorization, account, subscription);

        // TODO: test validations
    }
    /**
     * Consulta de relaciones
     *
     * Obtiene las posibles relaciones existentes para registrar beneficiarios en Monex. Se debe invocar este recurso antes de pre-registrar una cuenta de beneficiario.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAvailableRelationshipsMonexUsingGETTest() throws ApiException {
        String authorization = null;
        String subscription = null;
        RelationshipsResponse response = api.getAvailableRelationshipsMonexUsingGET(authorization, subscription);

        // TODO: test validations
    }
    /**
     * Consulta los beneficiarios registrados
     *
     * Obtiene los beneficiarios registrados al contrato relacionado con la suscripción, Los beneficiarios son los que actualmente se encuentran registrados en banca Monex.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBeneficiariesForAccountUsingGETTest() throws ApiException {
        String authorization = null;
        String subscription = null;
        String account = null;
        String rfc = null;
        BeneficiariesResponse response = api.getBeneficiariesForAccountUsingGET(authorization, subscription, account, rfc);

        // TODO: test validations
    }
    /**
     * Pre-registro de cuentas de beneficiarios.
     *
     * Pre-registra una o más cuentas de beneficiario en la plataforma, proporcionando una URL donde el cuentahabiente Monex debe ingresar un valor de su llave digital para confirmar el alta de las cuentas de beneficiarios.&lt;br/&gt;Los posibles valores de &lt;i&gt;relationship&lt;/i&gt; y &lt;i&gt;kind_of_relationship&lt;/i&gt; se deben  obtener de /subscriptions/{subscription}/beneficiaries/relationships.&lt;br/&gt;&lt;br/&gt;La confirmación de registro en Monex se realiza a través de una llamada a los webhooks registrados con el evento ACCOUNT.CREATED.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void preRegisterAccountsUsingPOSTTest() throws ApiException {
        AccountRequest body = null;
        String authorization = null;
        String subscription = null;
        TokenRequiredResponse response = api.preRegisterAccountsUsingPOST(body, authorization, subscription);

        // TODO: test validations
    }
    /**
     * Eliminación de beneficiarios SPEI® sin confirmar
     *
     * Elimina un conjunto de beneficiarios a registrar en la cuenta del cliente Monex relacionada a la suscripción, los beneficiarios no deben haber sido confirmados por el cliente.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeBeneficiariesPendingUsingDELETETest() throws ApiException {
        String authorization = null;
        String requestId = null;
        String subscription = null;
        api.removeBeneficiariesPendingUsingDELETE(authorization, requestId, subscription);

        // TODO: test validations
    }
    /**
     * Actualiza el monto límite
     *
     * Actualiza el monto límite a la cuenta de beneficiario proporcionada relacionada al contrato perteneciente a la subscripción.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAmountLimitAccountUsingPUTTest() throws ApiException {
        AmountRequest body = null;
        String authorization = null;
        String account = null;
        String subscription = null;
        api.updateAmountLimitAccountUsingPUT(body, authorization, account, subscription);

        // TODO: test validations
    }
}
