/*
 * Wire4RestAPI
 * Referencia de la API de Wire4
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package mx.wire4.api;

import mx.wire4.model.AccountRequest;
import mx.wire4.model.AmountRequest;
import mx.wire4.model.AuthorizedBeneficiariesResponse;
import mx.wire4.model.BeneficiariesResponse;
import mx.wire4.model.ErrorResponse;
import mx.wire4.model.RelationshipsResponse;
import mx.wire4.model.TokenRequiredResponse;
import mx.wire4.model.UrlsRedirect;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for CuentasDeBeneficiariosSpeiApi
 */
@Ignore
public class CuentasDeBeneficiariosSpeiApiTest {

    private final CuentasDeBeneficiariosSpeiApi api = new CuentasDeBeneficiariosSpeiApi();

    /**
     * Solicitud para agrupar cuentas de beneficiarios SPEI/SPID en estado pendiente.
     *
     * Solicta la agrupación de las cuentas de beneficiarios en estado pendiente para que sean autorizadas,  para ello se crea un conjunto de éstas que puede incluir tanto de SPEI como de SPID. Además se debe indicar las urls de redirección en caso de error y éxito
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void authorizeAccountsPendingPUTTest() throws Exception {
        UrlsRedirect body = null;
        String authorization = null;
        String subscription = null;
        AuthorizedBeneficiariesResponse response = api.authorizeAccountsPendingPUT(body, authorization, subscription);

        // TODO: test validations
    }
    /**
     * Elimina la cuenta del beneficiario
     *
     * Elimina la cuenta de beneficiario proporcionada relacionada al contrato perteneciente a la suscripción. La cuenta a borrar debe ser una que opere con SPEI.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteAccountUsingDELETETest() throws Exception {
        String authorization = null;
        String account = null;
        String subscription = null;
        api.deleteAccountUsingDELETE(authorization, account, subscription);

        // TODO: test validations
    }
    /**
     * Consulta de relaciones
     *
     * Obtiene las posibles relaciones existentes para registrar beneficiarios en Monex. Se debe invocar este recurso antes de pre-registrar una cuenta de beneficiario.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAvailableRelationshipsMonexUsingGETTest() throws Exception {
        String authorization = null;
        String subscription = null;
        RelationshipsResponse response = api.getAvailableRelationshipsMonexUsingGET(authorization, subscription);

        // TODO: test validations
    }
    /**
     * Consulta los beneficiarios por el identificador de la petición de registro
     *
     * Obtiene los beneficiarios enviados para registro en una petición al contrato relacionado con la suscripción, Los beneficiarios son los que actualmente se encuentran registrados en banca Monex, que pertenezcan a la petición que se solicita.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getBeneficiariesByRequestIdTest() throws Exception {
        String authorization = null;
        String requestId = null;
        String subscription = null;
        BeneficiariesResponse response = api.getBeneficiariesByRequestId(authorization, requestId, subscription);

        // TODO: test validations
    }
    /**
     * Consulta los beneficiarios registrados
     *
     * Obtiene los beneficiarios registrados al contrato relacionado con la suscripción, Los beneficiarios son los que actualmente se encuentran registrados en banca Monex.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getBeneficiariesForAccountUsingGETTest() throws Exception {
        String authorization = null;
        String subscription = null;
        String account = null;
        String beneficiaryBank = null;
        String beneficiaryName = null;
        String endDate = null;
        String initDate = null;
        String page = null;
        String rfc = null;
        String size = null;
        String status = null;
        BeneficiariesResponse response = api.getBeneficiariesForAccountUsingGET(authorization, subscription, account, beneficiaryBank, beneficiaryName, endDate, initDate, page, rfc, size, status);

        // TODO: test validations
    }
    /**
     * Pre-registro de cuentas de beneficiarios SPEI®.
     *
     * Pre-registra una o más cuentas de beneficiario en la plataforma de Wire4, ésta le proporcionará una URL donde lo llevará al centro de autorización para que el cuentahabiente Monex ingrese su llave digital para confirmar el alta de las cuentas de beneficiarios.&lt;br/&gt; Los posibles valores de &lt;em&gt;relationship&lt;/em&gt; y &lt;em&gt;kind_of_relationship&lt;/em&gt; se deben  obtener de &lt;a href&#x3D;\&quot;#operation/getAvailableRelationshipsMonexUsingGET\&quot;&gt;/subscriptions/{subscription}/beneficiaries/relationships.&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;La confirmación de registro en Monex se realizará a través de una notificación a los webhooks registrados con el evento de tipo &lt;a href&#x3D;\&quot;#section/Eventos/Tipos-de-Eventos\&quot;&gt;ACCOUNT.CREATED.&lt;/a&gt;
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void preRegisterAccountsUsingPOSTTest() throws Exception {
        AccountRequest body = null;
        String authorization = null;
        String subscription = null;
        TokenRequiredResponse response = api.preRegisterAccountsUsingPOST(body, authorization, subscription);

        // TODO: test validations
    }
    /**
     * Eliminación de beneficiarios SPEI® sin confirmar
     *
     * Elimina uno o más beneficiarios que se encuentran en estado pendiente de confirmar (autorizar) de la cuenta del cliente Monex relacionada a la suscripción.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void removeBeneficiariesPendingUsingDELETETest() throws Exception {
        String authorization = null;
        String requestId = null;
        String subscription = null;
        api.removeBeneficiariesPendingUsingDELETE(authorization, requestId, subscription);

        // TODO: test validations
    }
    /**
     * Solicitud para actualizar el monto límite de una cuenta
     *
     * Se crea una solicitud para actualizar el monto límite a la cuenta de beneficiario proporcionada y relacionada al contrato perteneciente a la subscripción. Una vez enviada la solicitud se retornará una URl que lo llevará al centro de autorización para que el cuentahabiente Monex ingrese su llave digital para confirmar la actualización del monto límite. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateAmountLimitAccountUsingPUTTest() throws Exception {
        AmountRequest body = null;
        String authorization = null;
        String account = null;
        String subscription = null;
        TokenRequiredResponse response = api.updateAmountLimitAccountUsingPUT(body, authorization, account, subscription);

        // TODO: test validations
    }
}
