/*
 * Wire4RestAPI
 * Referencia de la API de Wire4
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package mx.wire4.api;

import mx.wire4.ApiException;
import mx.wire4.model.AccountSpid;
import mx.wire4.model.ErrorResponse;
import mx.wire4.model.SpidBeneficiariesResponse;
import mx.wire4.model.TokenRequiredResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CuentasDeBeneficiariosSpidApi
 */
@Ignore
public class CuentasDeBeneficiariosSpidApiTest {

    private final CuentasDeBeneficiariosSpidApi api = new CuentasDeBeneficiariosSpidApi();

    /**
     * Consulta los beneficiarios SPID registrados
     *
     * Obtiene los beneficiarios SPID registrados al contrato relacionado con la suscripción. Los beneficiarios son los que actualmente se encuentran registrados en banca Monex.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpidBeneficiariesForAccountTest() throws ApiException {
        String authorization = null;
        String subscription = null;
        String account = null;
        String beneficiaryBank = null;
        String beneficiaryName = null;
        String endDate = null;
        String initDate = null;
        String rfc = null;
        String status = null;
        SpidBeneficiariesResponse response = api.getSpidBeneficiariesForAccount(authorization, subscription, account, beneficiaryBank, beneficiaryName, endDate, initDate, rfc, status);

        // TODO: test validations
    }
    /**
     * Pre-registro de cuentas de beneficiarios SPID®
     *
     * Pre-registra una o más cuentas de beneficiario SPID® en la plataforma de Wire4, ésta le proporcionaará una URL donde lo llevará al centro de autorización para que el cuentahabiente Monex ingrese su llave digital para confirmar el alta de las cuentas de beneficiarios.&lt;br/&gt; Los posibles valores de &lt;em&gt;relationship&lt;/em&gt; y &lt;em&gt;kind_of_relationship&lt;/em&gt; se deben  obtener de &lt;a href&#x3D;\&quot;#operation/getAvailableRelationshipsMonexUsingGET\&quot;&gt;/subscriptions/{subscription}/beneficiaries/relationships.&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;La confirmación de registro en Monex se realizará a través de una notificación a los webhooks registrados con el evento de tipo &lt;a href&#x3D;\&quot;#section/Eventos/Tipos-de-Eventos\&quot;&gt;ACCOUNT.CREATED.&lt;/a&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void preRegisterAccountsUsingPOST1Test() throws ApiException {
        AccountSpid body = null;
        String authorization = null;
        String subscription = null;
        TokenRequiredResponse response = api.preRegisterAccountsUsingPOST1(body, authorization, subscription);

        // TODO: test validations
    }
}
